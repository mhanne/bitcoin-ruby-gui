#!/usr/bin/env ruby
$:.unshift( File.expand_path("../../lib", __FILE__) )

require 'optparse'
require 'gui/gui'

defaults = {
  network: "bitcoin",
  keystore: nil,
  command: ["127.0.0.1", "9999"]
}
options = Bitcoin::Config.load(defaults, :wallet)
options[:storage] = Bitcoin::Node::Node::DEFAULT_CONFIG[:storage]

optparse = OptionParser.new do |opts|
  opts.banner =
    "Usage: bitcoin_wallet [options] <command> [<command options>]\n"

  opts.separator("\nAvailable options:\n")

  opts.on("-c", "--config FILE",
    "Config file (default: #{Bitcoin::Config::CONFIG_PATHS})") do |file|
    options = Bitcoin::Config.load_file(options, file, :wallet)
  end

  opts.on("-n", "--network NETWORK",
    "User Network (default: #{options[:network]})") do |network|
    options[:network] = network
  end

  opts.on("-s", "--storage BACKEND::CONFIG",
    "Use storage backend (default: #{options[:storage]})") do |storage|
    options[:storage] = storage
  end

  opts.on("--command [HOST:PORT]",
    "Node command socket (default: #{options[:command]})") do |command|
    options[:command] = command
  end

  opts.on("-k", "--keystore [backend::<config>]",
    "Key store (default: #{options[:store]})") do |store|
    options[:keystore] = store
  end

  opts.on("-h", "--help", "Display this help") do
    puts opts; exit
  end

  opts.separator "\nAvailable commands:\n" +
    " balance [<addr>] - display balance for given addr or whole wallet\n" +
    " list <addr> - list transaction history for address\n" +
    " send <addr>:<amount>[,<addr>:<amount>...] [<fee>] - send transaction\n" +
    " new - generate new key and add to keystore\n" +
    " import <base58> - import key in base58 format\n" +
    " export <addr> - export key to base58 format\n"

end

optparse.parse!

Bitcoin.network = options[:network]

backend, config = options[:storage].split("::")
@storage = Bitcoin::Blockchain.create_store(backend, db: config)

options[:keystore] ||= "simple::file=~/.bitcoin-ruby/#{Bitcoin.network_name}/keys.json"
backend, config = options[:keystore].split("::")
config = Hash[config.split(",").map{|c| c.split("=")}]

EM.run do
  @gui = Bitcoin::Gui::Gui.new(@storage, config['file'])
  Bitcoin::Gui::Connection.new(*options[:command], @gui)
  EM.gtk_main
end
